1、JavaScript中如何检测一个变量是一个String类型？请写出函数实现
	typeof(obj) === "string"
	typeof obj === "string"
	obj.constructor === String

2、请用js去除字符串空格？
	方法一：使用replace正则匹配的方法

	去除所有空格: str = str.replace(/\s*/g,"");      

	去除两头空格: str = str.replace(/^\s*|\s*$/g,"");

	去除左空格： str = str.replace( /^\s*/, “”);

	去除右空格： str = str.replace(/(\s*$)/g, "");

	var str = " 23 23 ";
	var str2 = str.replace(/\s*/g,"");
	console.log(str2); // 2323

	方法二：使用str.trim()方法
	str.trim()局限性：无法去除中间的空格，实例如下：
	var str = "   xiao  ming   ";
	var str2 = str.trim();
	console.log(str2);   //xiao  ming

	同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。

	方法三：使用jquery,$.trim(str)方法
	$.trim(str)局限性：无法去除中间的空格，实例如下：
	ar str = "   xiao  ming   ";
	var str2 = $.trim(str)
	console.log(str2);   //  xiao  ming

3、你如何获取浏览器URL中查询字符串中的参数？
	// 方法一：
	function showWindowHref(){
	    var sHref = window.location.href;
	    var args = sHref.split('?');
	    if(args[0] == sHref){
	        return "";
	    }
	    var arr = args[1].split('&');
	    var obj = {};
	    for(var i = 0;i< arr.length;i++){
	        var arg = arr[i].split('=');
	        obj[arg[0]] = arg[1];
	    }
	    return obj;
	}
	var href = showWindowHref(); // obj
	console.log(href['name']); // xiaoming

	// 方法二：
	function getQueryString(name) {
	    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
	    var r = window.location.search.substr(1).match(reg);
	    if (r != null) {
	        return unescape(r[2]);
	    }
	    return null;
	}

4、js 字符串操作函数

	我这里只是列举了常用的字符串函数，具体使用方法，请参考网址。

	concat() – 将两个或多个字符的文本组合起来，返回一个新的字符串。

	indexOf() – 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1 。

	charAt() – 返回指定位置的字符。

	lastIndexOf() – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。

	match() – 检查一个字符串是否匹配一个正则表达式。

	substr() 函数 -- 返回从string的startPos位置，长度为length的字符串

	substring() – 返回字符串的一个子串。传入参数是起始位置和结束位置。

	slice() – 提取字符串的一部分，并返回一个新字符串。

	replace() – 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。

	search() – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。

	split() – 通过将字符串划分成子串，将一个字符串做成一个字符串数组。

	length – 返回字符串的长度，所谓字符串的长度是指其包含的字符的个数。

	toLowerCase() – 将整个字符串转成小写字母。

	toUpperCase() – 将整个字符串转成大写字母。

5、怎样添加、移除、移动、复制、创建和查找节点？
	 1）创建新节点
	　　createDocumentFragment() //创建一个DOM片段
	　　createElement() //创建一个具体的元素
	　　createTextNode() //创建一个文本节点

	2）添加、移除、替换、插入
	　　appendChild() //添加
	　　removeChild() //移除
	　　replaceChild() //替换
	　　insertBefore() //插入

	3）查找
	　　getElementsByTagName() //通过标签名称
	　　getElementsByName() //通过元素的Name属性的值
	　　getElementById() //通过元素Id，唯一性


6、写出3个使用this的典型应用
	（1）、在html元素事件属性中使用，如：
	 <input type=”button” onclick=”showInfo(this);” value=”点击一下”/>

	（2）、构造函数
	 function Animal(name, color) {
	　　 this.name = name;
	　　 this.color = color;
	 }
	 （3）、input点击，获取值
	 <input type="button" id="text" value="点击一下" />
	 <script type="text/javascript">
	     var btn = document.getElementById("text");
	     btn.onclick = function() {
	         alert(this.value);    //此处的this是按钮元素
	     }
	 </script>
	 (4)、apply()/call()求数组最值
	 var  numbers = [5, 458 , 120 , -215 ]; 
	 var  maxInNumbers = Math.max.apply(this, numbers);  
	 console.log(maxInNumbers);  // 458
	 var maxInNumbers = Math.max.call(this,5, 458 , 120 , -215); 
	 console.log(maxInNumbers);  // 458

7、比较typeof与instanceof？
	相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。
	typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。
	细节：

	(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。

	(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。

	(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。

	Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。

8、如何理解闭包？
	1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。

	2、表现形式：使函数外部能够调用函数内部定义的变量。

	3、实例如下：
	节流防抖
	ref:https://www.cnblogs.com/duiniweixiao/p/8919695.html

	(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。

	用途和缺点：
		1、它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。
		2、内存泄漏

9、vue生命周期：https://segmentfault.com/a/1190000008010666

10、XSS的攻击方式
	1）反射型
	2）存储型

	XSS的防御措施：
	1）编码：对用户输入的数据进行HTML Entity编码 
	2）过滤：移除用户上传的DOM属性，如onerror等，移除用户上传的style节点，script节点，iframe节点等。
	3）校正：避免直接对HTML Entity编码，使用DOM Prase转换，校正不配对的DOM标签。

11、跨域相关
	1,jsonp:
		缺点：只能get，它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。
		优点：兼容性更好，不需要XMLHttpRequest或ActiveX的支持
	2,CORS:
	access-control-allow-origin
	Reference: https://segmentfault.com/a/1190000016327385
	3,iframe

12，网络请求
	统一处理状态

13，前端页面设计异常捕捉
	

14，你的优点缺点
	责任、坚持
	不太善于表达

15、清缓存



16、原生js如何快速找到dom的某个节点

17、封装组件的步骤和需要考虑的地方
	注意事项：
		1、作用域隔离
		2、单一职能、低耦合高内聚
		3、统一入口调用方法
		4、命名空间
	步骤：
		1、作用域隔离
		2、私有成员（柯里化函数）
		3、
	reference:https://www.cnblogs.com/chenhuichao/p/8202588.html

18、react与vue的相同点和不同点

19、jquery核心原理

20、如何实现类似磨刀的功能





